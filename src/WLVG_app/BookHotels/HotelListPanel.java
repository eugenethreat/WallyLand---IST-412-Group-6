/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package WLVG_app.BookHotels;

import WLVG_app.Controller;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author graem
 */
public class HotelListPanel extends javax.swing.JPanel {

    private final Controller cntl;
    private ArrayList<Vacancy> vacancyList = new ArrayList<Vacancy>();
    DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
           //all cells false
           return false;
        }
    };
    /**
     * Creates new form HotelListPanel
     */
    public HotelListPanel(Controller control) {
        this.cntl = control;
        fillList();
        initComponents();
    }
    
    public void fillList() {
        vacancyList.clear();
        
        Vacancy v1 = new Vacancy("Marriot", "Single", "Twin", "Standard");
        Vacancy v2 = new Vacancy("Marriot", "Double", "Queen", "Deluxe");
        Vacancy v3 = new Vacancy("Marriot", "Triple", "King", "Joint");
        Vacancy v4 = new Vacancy("Four Seasons", "Quad", "King", "Joint");
        Vacancy v5 = new Vacancy("Four Seasons", "Double", "Twin", "Suite");
        Vacancy v6 = new Vacancy("Four Seasons", "Triple", "Queen", "Deluxe");
        Vacancy v7 = new Vacancy("Hilton", "Single", "Queen", "Deluxe");
        Vacancy v8 = new Vacancy("Hilton", "Double", "King", "Standard");
        Vacancy v9 = new Vacancy("Hilton", "Triple", "Twin", "Suite");
        Vacancy v10 = new Vacancy("Hyatt", "Triple", "Queen", "Standard");
        Vacancy v11 = new Vacancy("Hyatt", "Quad", "Twin", "Suite");
        Vacancy v12 = new Vacancy("Hyatt", "Single", "King", "Joint");
        
       vacancyList.add(v1);
       vacancyList.add(v2);
       vacancyList.add(v3);
       vacancyList.add(v4);
       vacancyList.add(v5);
       vacancyList.add(v6);
       vacancyList.add(v7);
       vacancyList.add(v8);
       vacancyList.add(v9);
       vacancyList.add(v10);
       vacancyList.add(v11);
       vacancyList.add(v12);
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTable1.setModel(model);
        model.addColumn("Hotel");
        model.addColumn("Room Type");
        model.addColumn("Bed");
        model.addColumn("Layout");
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Select a Hotel");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Book Reservation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 108, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cntl.backToInputs();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int input = 2;
        if(!(jTable1.getSelectionModel().isSelectionEmpty())) {
            input = JOptionPane.showConfirmDialog(null, "You have selected a " + jTable1.getValueAt(jTable1.getSelectedRow(), 3) + " " + 
                jTable1.getValueAt(jTable1.getSelectedRow(), 1) + " with a " + jTable1.getValueAt(jTable1.getSelectedRow(), 2) + " bed at the " + 
                jTable1.getValueAt(jTable1.getSelectedRow(), 0) + " Hotel. Would you like to make a reservation?");
        }
        if(input == 0) {
            this.cntl.newPayment();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public void filterVacancies() {

        Iterator<Vacancy> itr = vacancyList.iterator();
        
        if(!(cntl.getHotel().equals("No Preference"))) {
            while(itr.hasNext()) {
                if(!(itr.next().getHotelName().equals(cntl.getHotel()))) {
                    itr.remove();
                }
            }
        }
        itr = vacancyList.iterator();
        
        if(!(cntl.getRoomType().equals("No Preference"))) {
            while(itr.hasNext()) {
                if(!(itr.next().getRoomType().equals(cntl.getRoomType()))) {
                    itr.remove();
                }
            }
        }
        itr = vacancyList.iterator();
        
        if(!(cntl.getBed().equals("No Preference"))) {
            while(itr.hasNext()) {
                if(!(itr.next().getBed().equals(cntl.getBed()))) {
                    itr.remove();
                }
            }
        }
        itr = vacancyList.iterator();

        
        if(!(cntl.getLayout().equals("No Preference"))) {
            while(itr.hasNext()) {
                if(!(itr.next().getLayout().equals(cntl.getLayout()))) {
                    itr.remove();
                }
            }
        }
        
        model.setRowCount(0);
        
        for(Vacancy vacancy : vacancyList) {
            model.addRow(new Object[]{vacancy.getHotelName(), vacancy.getRoomType(), vacancy.getBed(), vacancy.getLayout()});
        }
        
        fillList();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
